{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/components/App.svelte"
  ],
  "sourcesContent": [
    "<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-8 offset-2\">\n      <h1 class=\"masthead text-center text-dark\">Truffle Box</h1>\n      <h4 class=\"text-center text-primary\">Skeleton SvelteJS truffle box</h4>\n    \n      <Information connected={connected}></Information>\n    \n      <div class=\"alert alert-secondary\">\n        <h4>Smart Contract Example</h4>\n        <p>If your contracts compiled and migrated successfully, below will show a stored value of 5 (by default).</p>\n        <p>Try changing the value stored on <strong>line 71</strong> of <em>src/components/App.html</em>.</p>\n        <p>The stored value is: {storageValue}</p>\n      </div>\n    </div>\n  </div>\n</div>\n\n<style>\n  .masthead {\n    margin-top: 3em;\n  }\n</style>\n\n<script>\n  import Information from './Information.svelte'\n  import SimpleStorageContract from '../../build/contracts/SimpleStorage.json'\n  import loadWeb3 from '../utils/web3'\n  import shoelace from 'shoelace-css/dist/shoelace.css'\n  import contract from 'truffle-contract'\n  import { onMount } from 'svelte'\n\n  let storageValue\n  let connected = false\n  let web3\n\n  onMount(async () => {\n    const instance = await loadWeb3()\n    window['web3'] = web3 = instance\n    instantiateContract()\n  })\n\n  function instantiateContract () {\n    /*\n      * SMART CONTRACT EXAMPLE\n      *\n      * Normally these functions would be called in the context of a\n      * state management library, but for convenience I've placed them here.\n      */\n\n    const simpleStorage = contract(SimpleStorageContract)\n    simpleStorage.setProvider(web3.currentProvider)\n\n    // Declaring this for later so we can chain functions on SimpleStorage.\n    let simpleStorageInstance\n\n    // Get accounts.\n    web3.eth.getAccounts((error, accounts) => {\n      if (error) { throw error }\n\n      simpleStorage.deployed().then(instance => {\n        simpleStorageInstance = instance\n\n        // Stores a given value, 5 by default.\n        return simpleStorageInstance.set(5, { from: accounts[0] })\n      }).then(result => {\n        // Get the value from the contract to prove it worked.\n        return simpleStorageInstance.get.call({ from: accounts[0] })\n      }).then(result => {\n        // Update state with the result.\n        connected = true\n        storageValue = result.c[0]\n      })\n    })\n  }\n</script>"
  ],
  "names": [],
  "mappings": "AAmBE,SAAS,cAAC,CAAC,AACT,UAAU,CAAE,GAAG,AACjB,CAAC"
}